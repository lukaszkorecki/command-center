# -*- mode: sh -*-

## custom paths
export LC_ALL=en_US.UTF-8
export LANG=$LC_ALL
export SHELL=/bin/zsh
export PATH=$HOME/.emacs.d/etc/bin:$PATH

export PATH=$HOME/bin:$PATH
export PATH=./node_modules/.bin:$PATH
export PATH=/opt/homebrew/bin:$PATH
export PATH=/usr/local/bin:$PATH

# Homebrew configuration
if [[ -e $(which brew) ]]; then
  export HOMEBREW_NO_AUTO_UPDATE=1
  export HOMEBREW_NO_ENV_HINTS=1
  brewPrefix=$(brew --prefix)
else
  brewPrefix=""
fi

if [[ -e $brewPrefix/bin/brew ]]; then
  eval "$($brewPrefix/bin/brew shellenv)"
fi

# manage JVM via mise, if installed
# otherwise fallback to the JVM managed by homebrew

if [[ "$(which mise)" ]] ; then
  # eval $(mise activate zsh)
  export PATH="$HOME/.local/share/mise/shims:$PATH"
else
  if [[ "$brewPrefix" != "" ]]; then
    export PATH=$brewPrefix/bin:$PATH

    pythonPath=$brewPrefix/opt/python/libexec/bin
    if [[ -e $pythonPath ]]; then
      export PATH="$pythonPath:$PATH"
    fi

    if [[ -e $brewPrefix/opt/openjdk ]]; then
      export PATH="$brewPrefix/opt/openjdk/bin:$PATH"
      export JAVA_CMD=$brewPrefix/opt/openjdk/bin/java
      export JAVAHOME=$brewPrefix/opt/openjdk/
      export JAVA_HOME=$JAVAHOME
    fi

    if [[ -e $brewPrefix/opt/openjdk@11 ]]; then
      export PATH="$brewPrefix/opt/openjdk@11/bin:$PATH"
      export JAVA_CMD=$brewPrefix/opt/openjdk@11/bin/java
      export JAVAHOME=$brewPrefix/opt/openjdk@11/
      export JAVA_HOME=$JAVAHOME

    fi
  fi
fi

# secrets and work stuff
if [[ -e ~/.private/env.sh ]]; then
  source ~/.private/env.sh
  PATH="$PATH:$HOME/.private/bin"
fi

## aliases
# go to git repo root
alias gcd='cd $(git root)'
# go to project root, might be repo root but not necessarily
alias pcd='cd $(project-root-path)'

if [[ "$(which bat)" == /* ]]; then
  alias less='bat -p'
  # use bat as man-page viewer
  export MANPAGER="sh -c 'col -bx | bat --language=man -p'"

  help() {
    ${*} | bat -l=help -p
  }
fi

## navigation
# make path operations work like bash (e.g. M-backspace deletes path fragments)
autoload -U select-word-style
select-word-style bash

# auto-cd
setopt AUTO_CD

## load completions
fpath+=(~/.emacs.d/etc/zsh/)

autoload -Uz compinit && compinit
autoload _docker
autoload _docker-compose
autoload _rg
autoload _git

# Load autocomplete for other tools not supported by zsh directly
if [[ "$(which op 2>&1)" == /* ]]; then
  eval "$(op completion zsh)"
  compdef _op op
fi

if [[ "$(which doctl 2>&1)" == /* ]]; then
  eval "$(doctl completion zsh)"
fi

# git info in prompt and such
autoload -Uz vcs_info

# enable ZSH hooks
autoload -U add-zsh-hook

# disable docker cli hints
export DOCKER_CLI_HINTS=false

# History Configuration
HISTSIZE=5000
SAVEHIST=5000
HISTFILE=~/.zsh_history
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt incappendhistory

# FIXME: figure out why emacsclient is not working and crashes things
# export EDITOR=zile

cl_green() {
  echo -e "\033[0;32m"
}

cl_red() {
  echo -e "\033[0;31m"
}

cl_blue() {
  echo -e "\033[0;34m"
}

cl_yellow() {
  echo -e "\033[0;33m"
}

cl_reset() {
  echo -e "\033[0m"
}

# ░▒▓██   prompt  █▓▒░

PROMPT_BASE="▒░"
precmd_vcs_info() {
  vcs_info
}
export _SEC_FLAG="░"
precmd_sec_info() {
  if [[ "$OP_SECRETS_LOADED" == "" ]]; then
    export _SEC_FLAG=" "
  else
    export _SEC_FLAG="S"
  fi
}

export _EXIT_CODE_FLAG="░"
precmd_last_cmd_exit_code_info() {
  local exit_code=$?
  if [[ $exit_code -ne 0 ]]; then
    export _EXIT_CODE_FLAG="!"
  else
    export _EXIT_CODE_FLAG=" "
  fi
}

precmd_functions+=(precmd_vcs_info)
precmd_functions+=(precmd_sec_info)
precmd_functions+=(precmd_last_cmd_exit_code_info)

setopt PROMPT_SUBST
zstyle ':vcs_info:git:*' formats '[%b]'
zstyle ':vcs_info:*' enable git

BR=$'\n'
export PROMPT='${PROMPT_BASE} ${_EXIT_CODE_FLAG}${_SEC_FLAG} %3~ ${vcs_info_msg_0_} ${BR}# '

# integration with iterm:
if [[ "$LC_TERMINAL" == "iTerm2" ]]; then
  if [[ -e ~/.emacs.d/vendor/iterm2_shell_integration.zsh ]]; then
    export ITERM2_SQUELCH_MARK=1
    source ~/.emacs.d/vendor/iterm2_shell_integration.zsh
  fi
fi

# integration with Vterm & wezterm:
if [[ "${INSIDE_EMACS}" == 'vterm' ]]; then
  if [[ -n ${EMACS_VTERM_PATH} ]] &&
    [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh ]]; then
    source ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh
  fi

  alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'

  add-zsh-hook -Uz chpwd (){ print -Pn "\e]2;%~\a" }

  vterm_cmd() {
    local vterm_elisp
    vterm_elisp=""
    while [ $# -gt 0 ]; do
      vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
      shift
    done
    vterm_printf "51;E$vterm_elisp"
  }

  vterm_prompt_end() {
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
  }

  PROMPT=$PROMPT'%{$(vterm_prompt_end)%}'

else
  if [[ "$TERM_PROGRAM" == "WezTerm" ]] ; then
    source /Applications/WezTerm.app/Contents/Resources/wezterm.sh
  fi
fi
