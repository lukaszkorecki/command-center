#!/usr/bin/env bb


(require '[babashka.fs :as fs]
         '[babashka.process :as proc]
         '[clojure.string :as str])

(defn nil-or-val [v]
  (when-not (str/blank? v) v))

(defn make-cmd
  ([cmd-vec]
   (make-cmd cmd-vec []))
  ([cmd-vec extra-args]
   (str/join " " (concat cmd-vec extra-args))))

(defn git-root []
  (-> (proc/shell {:out :string :err :string :continue true} (make-cmd ["git" "rev-parse" "--show-toplevel"]))
      :out
      str/trim
      nil-or-val))

(def pj-file-map

  [["/script/repl" {:type :custom}]
   ["/script/nrepl" {:type :custom}]
   ["/script/lein" {:type :custom}]
   ["/deps.edn" {:type :tools.deps}]
   ["/project.clj" {:type :lein}]
   ["/bb.edn" {:type :bb}]])

(def debug?
  (System/getenv "DEBUG"))

(defn exec-cmd [{:keys [cmd
                        extra-args
                        cwd
                        env]
                 :or {extra-args []}}]
  (let [c (make-cmd cmd extra-args)]
    (if debug?
      (printf "cwd: %s exec-cmd: %s\n" cwd c)
      (proc/exec (cond-> {:dir cwd :env (into {} (System/getenv))}
                   env (update :env merge env))
                 c))))

(if-let [proj-root (git-root)]
  (let [{:keys [type launch-path]} (->> pj-file-map
                                        (map (fn [[f opts]]
                                               (let [lookup-path (str proj-root "/" f)]
                                                 (when (fs/exists? lookup-path)

                                                   {:type (:type opts)
                                                    :launch-path lookup-path}))))

                                        (remove nil?)
                                        first)]

    (case type
      :custom
      (exec-cmd {:cmd [launch-path]
                 :extra-args *command-line-args*
                 :cwd proj-root})

      :tools.deps
      (exec-cmd {:cwd proj-root :env {"TERM" "xterm"} :cmd ["clojure" "-M:dev/rumble:dev:test:dev/nrepl"]})

      :lein
      (exec-cmd {:cwd proj-root :cmd ["lein"] :extra-args *command-line-args*})

      :bb
      (let [addr (str "localhost:" (+ 10000 (rand-int 1000)))]
              ;; TODO: somehow handle server running already?
        (spit (str proj-root "/.nrepl-port") addr)
        (exec-cmd {:cwd proj-root :cmd ["bb" "nrepl-server" addr]}))

      #_else
      (do
        (println "Couldn't find a Clojure project file")
        (System/exit 1))))

  (do
    (println "Not in a git repo")
    (System/exit 1)))
