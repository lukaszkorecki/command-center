#!/usr/bin/env bb

;; Helps with loading secrets from 1p via op CLI, but with some QOL improvements:
;; - secrets are referenced in an EDN config
;; - there are multiple output formats: shell and Emacs lisp

#_{:clj-kondo/ignore [:namespace-name-mismatch]}
(ns op-secret-loader
  (:require [babashka.process :as proc]
            [clojure.string :as str]
            [clojure.edn :as edn]
            [babashka.fs :as fs]
            [babashka.cli :as cli]))

(defn error [str]
  (binding [*out* *err*]
    (println str)))

(defn read-config
  [path]
  ;; (error (format "reading %s" path))
  (try
    (edn/read-string (slurp (str (fs/expand-home path))))
    (catch Exception err
      (error "File not found or couldn't be read")
      (error err)
      (error (.getMessage err))
      (System/exit 1))))

;; Different formatters for output

;; Shell output,as export VAR=VALUE
(defn acc-template-shell [{:keys [secrets]}]
  (->> secrets
       (map (fn [[env-key {:keys [path value]}]]
              (format "export %s=\"%s\""
                      env-key
                      (if path
                        (format "{{ %s }}" path)
                        value))))
       (str/join "\n")))

(defn template-shell [config]
  (->> config
       (map (fn [{:keys [account-id] :as cnf}]
              (format "# %s\n%s"
                      account-id
                      (acc-template-shell cnf))))

       (str/join "\n")))

(defn acc-template-env [{:keys [secrets]}]
  (->> secrets
       (map (fn [[env-key {:keys [path value]}]]
              (format "%s=\"%s\""
                      env-key
                      (if path
                        (format "{{ %s }}" path)
                        value))))
       (str/join "\n")))

(defn template-env [config]
  (->> config
       (map (fn [cnf]
              (acc-template-shell cnf)))

       (str/join "\n")))

;; dispatch on format
(defn acc-template [format config]
  (case format
    "shell" (acc-template-shell config)
    "env" (acc-template-env config)))

;; Pass template to op and get it interpolated

(defn resolve-secrets [format config]
  (let [out (->> config
                 (map (fn [config]
                        (assoc-in config [:secrets "OP_SECRETS_LOADED"] {:value "true"})))
                 (map (fn [{:keys [account-id] :as account-config}]
                        (let [tmpl (acc-template format account-config)
                              tmp-file (fs/create-temp-file)
                              cmd (str/join " "
                                            ["/opt/homebrew/bin/op" ;; FIXME!
                                             "--account" account-id
                                             "inject"
                                             "-i" (str tmp-file)])]
                          (spit (str tmp-file) tmpl)
                          (let [{:keys [out err]} (proc/shell {:out :string :err :string} cmd)]
                            (if err
                              (error err)
                              out)))))
                 (str/join "\n"))]
    (println out)))

;; Command line handling

(def spec
  [[:format {:desc "Output format, either shell or env"
             :alias :f
             :default "shell"}]

   [:config {:desc "secrets.edn path"
             :alias :c}]

   [:debug {:desc "Debug template output, without invoking 1password CLI"
            :coerce :boolean
            :default false}]

   [:account-id {:desc "Load secrets only for specific account"
                 :alias :a}]

   [:help {:desc "HELP"
           :alias :h
           :coerce :boolean
           :default false}]])

(def config-help
  "\n\nConfig file format:
Config is a EDN file with a vector of maps.

The map has to contain :account-id key - usually the URL or ID found using `op account list`
And :secrets map, where key is environment variable name to export the var value to.
Value of each key is a map of either:
- :value - a static value
- :path - 1password CLI secret path, e.g op://Personal/GitHub/PATH

Example:
[
  { :account-id \"my.1password.com\"
    :secrets {
       \"ENV_VAR_NAME\" {:value \"STATIC_VALUE\" }
       \"ENV_VAR_NAME_2\" {:path \"op://Some/Secret/path\" }
    }
  }
]

:path has to be a path readable by `op read`, see here:
https://developer.1password.com/docs/cli/secrets-reference-syntax#secret-reference-examples

")

(defn print-help-and-exit []
  (println (cli/format-opts {:spec spec}))
  (println config-help)
  (System/exit 0))

(defn -main [args]
  (when-not (seq args)
    (print-help-and-exit))

  (let [{:keys [format config debug help account-id]} (cli/parse-opts args {:spec spec})]
    (if help
      (print-help-and-exit)
      (let [config (read-config config)
            config (if account-id
                     (filter #(= (:account-id %) account-id) config)
                     config)]

        (if debug
          (println (case format
                     "shell" (template-shell config)
                     "env" (template-env config)))
          (resolve-secrets format config))))))

(-main *command-line-args*)
